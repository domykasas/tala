name: Create Pre-Release

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  pre-release:
    # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all commits and tags
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.4'
    
    - name: Get last pre-release tag or create new one
      id: last-pre-release-tag
      run: |
        # Fetch all tags
        git fetch --tags

        # Fetch only the tags that match the pre-release format
        pre_release_tags=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*-rc*' --sort=-v:refname)

        # Get the last pre-release tag
        last_pre_release_tag=$(echo "$pre_release_tags" | head -n 1)

        if [ -z "$last_pre_release_tag" ]; then
          # If no pre-release tags found, get the last release tag
          last_release_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          if [ -z "$last_release_tag" ]; then
            # If no release tags found, start with v0.1.0-rc.1
            new_pre_release_tag="v0.1.0-rc.1"
          else
            # Extract version parts and create first RC
            version_without_v=${last_release_tag#v}
            IFS='.' read -r major minor patch <<< "$version_without_v"
            new_pre_release_tag="v$major.$minor.$patch-rc.1"
          fi
          echo "No pre-release tags found. Creating a new one: $new_pre_release_tag"
        else
          echo "Last pre-release tag: $last_pre_release_tag"
          # Extract RC number and increment
          version_part=${last_pre_release_tag%-rc.*}
          rc_part=${last_pre_release_tag##*-rc.}
          incremented_rc_number=$((rc_part + 1))
          new_pre_release_tag="$version_part-rc.$incremented_rc_number"
        fi

        echo "new_pre_release_tag=$new_pre_release_tag" >> $GITHUB_OUTPUT
        echo "New pre-release tag: $new_pre_release_tag"

    - name: Build binaries
      run: |
        # Create build directory
        mkdir -p build
        
        # Build for different platforms
        echo "Building for Linux (amd64)..."
        GOOS=linux GOARCH=amd64 go build -o build/tala-linux-amd64 .
        
        echo "Building for Linux (arm64)..."
        GOOS=linux GOARCH=arm64 go build -o build/tala-linux-arm64 .
        
        echo "Building for Windows (amd64)..."
        GOOS=windows GOARCH=amd64 go build -o build/tala-windows-amd64.exe .
        
        echo "Building for Windows (arm64)..."
        GOOS=windows GOARCH=arm64 go build -o build/tala-windows-arm64.exe .
        
        echo "Building for macOS (amd64)..."
        GOOS=darwin GOARCH=amd64 go build -o build/tala-macos-amd64 .
        
        echo "Building for macOS (arm64)..."
        GOOS=darwin GOARCH=arm64 go build -o build/tala-macos-arm64 .

    - name: Create checksums
      run: |
        cd build
        sha256sum * > checksums.txt
        echo "Checksums created:"
        cat checksums.txt

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}
        release_name: Pre-release ${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}
        body: |
          ## Pre-release ${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}
          
          This is a pre-release version created from PR #${{ github.event.pull_request.number }}.
          
          ### Changes
          ${{ github.event.pull_request.title }}
          
          ### Downloads
          - **Linux**: `tala-linux-amd64`, `tala-linux-arm64`
          - **Windows**: `tala-windows-amd64.exe`, `tala-windows-arm64.exe`
          - **macOS**: `tala-macos-amd64`, `tala-macos-arm64`
          
          ### Installation
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x tala-*`
          3. Run: `./tala-*` (or `tala-*.exe` on Windows)
          
          **Note**: This is a pre-release version and may contain bugs. Use for testing purposes only.
        draft: false
        prerelease: true

    - name: Upload Linux amd64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-linux-amd64
        asset_name: tala-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Linux arm64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-linux-arm64
        asset_name: tala-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload Windows amd64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-windows-amd64.exe
        asset_name: tala-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows arm64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-windows-arm64.exe
        asset_name: tala-windows-arm64.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS amd64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-macos-amd64
        asset_name: tala-macos-amd64
        asset_content_type: application/octet-stream

    - name: Upload macOS arm64 binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/tala-macos-arm64
        asset_name: tala-macos-arm64
        asset_content_type: application/octet-stream

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain