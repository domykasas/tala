name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

env:
  GO_VERSION: '1.24.4'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            packages: true
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            name: linux-arm64
            packages: false
          
          # Windows builds
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            packages: true
          - os: windows-latest
            goos: windows
            goarch: arm64
            name: windows-arm64
            packages: false
          
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            name: macos-amd64
            packages: true
          - os: macos-latest
            goos: darwin
            goarch: arm64
            name: macos-arm64
            packages: false
          
          # FreeBSD build
          - os: ubuntu-latest
            goos: freebsd
            goarch: amd64
            name: freebsd-amd64
            packages: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --version || xcode-select --install || true

    - name: Get version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version_no_v=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build TUI binary
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags "-X main.version=$VERSION" -o tala-${{ matrix.name }}.exe .
        else
          go build -ldflags "-X main.version=$VERSION" -o tala-${{ matrix.name }} .
        fi

    - name: Build GUI binary
      if: matrix.goos != 'freebsd'
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -tags gui -ldflags "-X main.version=$VERSION" -o tala-gui-${{ matrix.name }}.exe . || echo "GUI build failed for ${{ matrix.name }}"
        else
          go build -tags gui -ldflags "-X main.version=$VERSION" -o tala-gui-${{ matrix.name }} . || echo "GUI build failed for ${{ matrix.name }}"
        fi

    - name: Create packages (Linux)
      if: matrix.packages && matrix.goos == 'linux'
      run: |
        VERSION=${{ steps.version.outputs.version_no_v }}
        
        # Install packaging tools
        sudo apt-get install -y snapcraft
        go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
        
        # Create directories
        mkdir -p dist pkg
        
        # Copy binaries
        cp tala-${{ matrix.name }} dist/
        cp tala-gui-${{ matrix.name }} dist/ || echo "No GUI binary"
        
        # Create DEB package
        cat > nfpm.yaml << 'EOF'
        name: tala
        arch: ${{ matrix.goarch }}
        platform: linux
        version: ${{ steps.version.outputs.version_no_v }}
        maintainer: "Tala Team"
        description: "Terminal AI Language Assistant"
        homepage: "https://github.com/domykasas/tala"
        license: "MIT"
        contents:
          - src: dist/tala-${{ matrix.name }}
            dst: /usr/bin/tala
            file_info:
              mode: 0755
          - src: dist/tala-gui-${{ matrix.name }}
            dst: /usr/bin/tala-gui
            file_info:
              mode: 0755
        EOF
        
        # Build DEB
        nfpm package --packager deb --target pkg/
        
        # Build RPM
        nfpm package --packager rpm --target pkg/
        
        # Create AppImage (basic)
        mkdir -p AppDir/usr/bin
        cp dist/tala-${{ matrix.name }} AppDir/usr/bin/tala
        cp dist/tala-gui-${{ matrix.name }} AppDir/usr/bin/tala-gui || echo "No GUI for AppImage"
        
        # Download AppImage tools
        wget -O appimagetool-x86_64.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppImage desktop file
        cat > AppDir/tala.desktop << 'EOF'
        [Desktop Entry]
        Name=Tala
        Exec=tala
        Icon=tala
        Type=Application
        Categories=Utility;
        EOF
        
        # Create AppImage
        ./appimagetool-x86_64.AppImage AppDir tala-${{ matrix.name }}.AppImage --no-appstream || echo "AppImage creation failed"

    - name: Create packages (Windows)
      if: matrix.packages && matrix.goos == 'windows'
      run: |
        # Create zip archive
        if [ -f "tala-gui-${{ matrix.name }}.exe" ]; then
          7z a tala-${{ matrix.name }}.zip tala-${{ matrix.name }}.exe tala-gui-${{ matrix.name }}.exe
        else
          7z a tala-${{ matrix.name }}.zip tala-${{ matrix.name }}.exe
        fi
      shell: bash

    - name: Create packages (macOS)
      if: matrix.packages && matrix.goos == 'darwin'
      run: |
        # Create DMG
        mkdir -p dist
        cp tala-${{ matrix.name }} dist/
        cp tala-gui-${{ matrix.name }} dist/ || echo "No GUI binary"
        
        # Create DMG using hdiutil
        hdiutil create -volname "Tala" -srcfolder dist -ov -format UDZO tala-${{ matrix.name }}.dmg

    - name: Create checksums
      run: |
        # Create checksums for all artifacts
        if [ "${{ matrix.goos }}" = "windows" ]; then
          sha256sum tala-${{ matrix.name }}.exe > tala-${{ matrix.name }}.exe.sha256
          [ -f "tala-gui-${{ matrix.name }}.exe" ] && sha256sum tala-gui-${{ matrix.name }}.exe > tala-gui-${{ matrix.name }}.exe.sha256
          [ -f "tala-${{ matrix.name }}.zip" ] && sha256sum tala-${{ matrix.name }}.zip > tala-${{ matrix.name }}.zip.sha256
        else
          sha256sum tala-${{ matrix.name }} > tala-${{ matrix.name }}.sha256
          [ -f "tala-gui-${{ matrix.name }}" ] && sha256sum tala-gui-${{ matrix.name }} > tala-gui-${{ matrix.name }}.sha256
          [ -f "tala-${{ matrix.name }}.dmg" ] && sha256sum tala-${{ matrix.name }}.dmg > tala-${{ matrix.name }}.dmg.sha256
          [ -f "tala-${{ matrix.name }}.AppImage" ] && sha256sum tala-${{ matrix.name }}.AppImage > tala-${{ matrix.name }}.AppImage.sha256
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tala-${{ matrix.name }}
        path: |
          tala-*
          pkg/*
        retention-days: 30

  # Collect all artifacts and create release
  create-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -name "tala-*" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.deb" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.rpm" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.AppImage" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.sha256" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Get version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-rc') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}