name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-rc*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all commits and tags
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.4'
    
    - name: Determine release type
      id: release-type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual dispatch - create next version tag
          echo "manual_dispatch=true" >> $GITHUB_OUTPUT
        else
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "manual_dispatch=false" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains -rc. or -rc)
          if [[ "$TAG_NAME" == *"-rc."* ]] || [[ "$TAG_NAME" == *"-rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=Pre-release" >> $GITHUB_OUTPUT
          else
            # Check if this is a major release (*.0.0)
            if [[ "$TAG_NAME" =~ ^v[0-9]+\.0\.0$ ]]; then
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "release_type=Major Release" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "release_type=Release" >> $GITHUB_OUTPUT
            fi
          fi
        fi
        
        echo "Release type determined for: $TAG_NAME"

    - name: Get last non-pre-release tag (manual dispatch)
      id: last-release-tag
      if: steps.release-type.outputs.manual_dispatch == 'true'
      run: |
        # Fetch all tags and filter for non-pre-release tags
        non_pre_release_tags=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname)

        # Get the last non-pre-release tag
        last_non_pre_release_tag=$(echo "$non_pre_release_tags" | head -n 1)

        if [ -z "$last_non_pre_release_tag" ]; then
          # If no non-pre-release tags found, get the last pre-release tag
          last_pre_release_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*-rc*' --sort=-v:refname | head -n 1)
          
          if [ -z "$last_pre_release_tag" ]; then
            # If no tags found at all, create the initial version
            new_tag="v0.0.1"
          else
            # Extract major, minor, and patch components from the last pre-release tag
            version_without_v=${last_pre_release_tag#v}
            version_without_rc=${version_without_v%-rc.*}
            new_tag="v$version_without_rc"
          fi
        else
          # Extract major, minor, and patch components from the last non-pre-release tag
          version_without_v=${last_non_pre_release_tag#v}
          IFS='.' read -r major minor patch <<< "$version_without_v"
          # Increment the patch version
          incremented_patch=$((patch + 1))
          new_tag="v$major.$minor.$incremented_patch"
        fi

        echo "Last non-pre-release tag: $last_non_pre_release_tag"
        echo "New tag: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Create and push new tag (manual dispatch)
      if: steps.release-type.outputs.manual_dispatch == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.last-release-tag.outputs.new_tag }}
        git push origin ${{ steps.last-release-tag.outputs.new_tag }}
        echo "tag_name=${{ steps.last-release-tag.outputs.new_tag }}" >> $GITHUB_OUTPUT
        echo "Created and pushed new tag: ${{ steps.last-release-tag.outputs.new_tag }}"

    - name: Get changelog for this version
      id: changelog
      if: steps.release-type.outputs.manual_dispatch == 'false'
      run: |
        TAG_NAME=${{ steps.release-type.outputs.tag_name }}
        VERSION_WITHOUT_V=${TAG_NAME#v}
        
        # Extract changelog section for this version
        if grep -q "## \[$VERSION_WITHOUT_V\]" CHANGELOG.md; then
          # Get the changelog section between this version and the next
          CHANGELOG_SECTION=$(sed -n "/## \[$VERSION_WITHOUT_V\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          echo "changelog_found=true" >> $GITHUB_OUTPUT
          
          # Save changelog to file for multiline output
          echo "$CHANGELOG_SECTION" > changelog_section.txt
        else
          echo "changelog_found=false" >> $GITHUB_OUTPUT
          echo "No changelog entry found for version $VERSION_WITHOUT_V" > changelog_section.txt
        fi

    - name: Build binaries
      if: steps.release-type.outputs.manual_dispatch == 'false'
      run: |
        # Create build directory
        mkdir -p build
        
        # Extract version for filename
        VERSION=${{ steps.release-type.outputs.tag_name }}
        
        # Build for different platforms with version in filename
        echo "Building for Linux (amd64)..."
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-linux-amd64 .
        
        echo "Building for Linux (arm64)..."
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-linux-arm64 .
        
        echo "Building for Windows (amd64)..."
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-windows-amd64.exe .
        
        echo "Building for Windows (arm64)..."
        GOOS=windows GOARCH=arm64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-windows-arm64.exe .
        
        echo "Building for macOS (amd64)..."
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-macos-amd64 .
        
        echo "Building for macOS (arm64)..."
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=$VERSION" -o build/tala-$VERSION-macos-arm64 .

    - name: Create checksums
      if: steps.release-type.outputs.manual_dispatch == 'false'
      run: |
        cd build
        sha256sum * > checksums.txt
        echo "Checksums created:"
        cat checksums.txt

    - name: Read changelog content
      if: steps.release-type.outputs.manual_dispatch == 'false'
      id: changelog-content
      run: |
        if [ -f changelog_section.txt ]; then
          CHANGELOG_CONTENT=$(cat changelog_section.txt)
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog_content=No changelog entry found for this version." >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.release-type.outputs.manual_dispatch == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release-type.outputs.tag_name }}
        name: ${{ steps.release-type.outputs.release_type }} ${{ steps.release-type.outputs.tag_name }}
        body: |
          ## ${{ steps.release-type.outputs.release_type }} ${{ steps.release-type.outputs.tag_name }}
          
          ### Changes
          
          ${{ steps.changelog-content.outputs.changelog_content }}
          
          ### Downloads
          
          Choose the appropriate binary for your platform:
          
          | Platform | Architecture | Download |
          |----------|-------------|----------|
          | Linux | x86_64 | `tala-${{ steps.release-type.outputs.tag_name }}-linux-amd64` |
          | Linux | ARM64 | `tala-${{ steps.release-type.outputs.tag_name }}-linux-arm64` |
          | Windows | x86_64 | `tala-${{ steps.release-type.outputs.tag_name }}-windows-amd64.exe` |
          | Windows | ARM64 | `tala-${{ steps.release-type.outputs.tag_name }}-windows-arm64.exe` |
          | macOS | Intel | `tala-${{ steps.release-type.outputs.tag_name }}-macos-amd64` |
          | macOS | Apple Silicon | `tala-${{ steps.release-type.outputs.tag_name }}-macos-arm64` |
          
          ### Installation
          
          **Linux/macOS:**
          ```bash
          # Download the binary for your platform
          chmod +x tala-*
          ./tala-*
          ```
          
          **Windows:**
          ```cmd
          # Download the .exe file for your platform
          tala-windows-*.exe
          ```
          
          ### Prerequisites
          
          - For default setup: [Ollama](https://ollama.ai) with deepseek-r1 model
          - For OpenAI/Anthropic: Valid API keys
          
          ### Quick Start
          
          ```bash
          # Install Ollama and pull model (for default setup)
          ollama serve
          ollama pull deepseek-r1
          
          # Run Tala
          ./tala-*
          ```
          
          ### Verification
          
          Verify your download using the provided checksums:
          ```bash
          sha256sum -c checksums.txt
          ```
          
          ---
          
          ${{ steps.release-type.outputs.is_prerelease == 'true' && '**Note**: This is a pre-release version and may contain bugs. Use for testing purposes only.' || 'For support and documentation, visit the [repository](https://github.com/domykasas/tala).' }}
        files: |
          build/tala-*-linux-amd64
          build/tala-*-linux-arm64
          build/tala-*-windows-amd64.exe
          build/tala-*-windows-arm64.exe
          build/tala-*-macos-amd64
          build/tala-*-macos-arm64
          build/checksums.txt
        draft: false
        prerelease: ${{ steps.release-type.outputs.is_prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

