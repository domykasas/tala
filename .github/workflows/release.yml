name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

permissions:
  contents: write
  
env:
  GO_VERSION: '1.24.4'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            packages: true
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            name: linux-arm64
            packages: false
          
          # Windows builds
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            packages: true
          - os: windows-latest
            goos: windows
            goarch: arm64
            name: windows-arm64
            packages: false
          
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            name: macos-amd64
            packages: true
          - os: macos-latest
            goos: darwin
            goarch: arm64
            name: macos-arm64
            packages: false
          
          # FreeBSD build
          - os: ubuntu-latest
            goos: freebsd
            goarch: amd64
            name: freebsd-amd64
            packages: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libasound2-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --version || xcode-select --install || true

    - name: Get version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version_no_v=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build TUI binary
      shell: bash
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags "-X main.version=$VERSION" -o tala-${{ matrix.name }}.exe .
        else
          go build -ldflags "-X main.version=$VERSION" -o tala-${{ matrix.name }} .
        fi

    - name: Build GUI binary
      if: matrix.goos != 'freebsd'
      shell: bash
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -tags gui -ldflags "-X main.version=$VERSION" -o tala-gui-${{ matrix.name }}.exe . || echo "GUI build failed for ${{ matrix.name }}"
        else
          go build -tags gui -ldflags "-X main.version=$VERSION" -o tala-gui-${{ matrix.name }} . || echo "GUI build failed for ${{ matrix.name }}"
        fi

    - name: Create packages (Linux)
      if: matrix.packages && matrix.goos == 'linux'
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version_no_v }}
        
        # Install packaging tools
        # Note: snapcraft installation removed - handled by snap in snapcraft workflow
        go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
        
        # Create directories
        mkdir -p dist pkg
        
        # Copy binaries
        cp tala-${{ matrix.name }} dist/
        cp tala-gui-${{ matrix.name }} dist/ || echo "No GUI binary"
        
        # Create DEB package
        cat > nfpm.yaml << 'EOF'
        name: tala
        arch: ${{ matrix.goarch }}
        platform: linux
        version: ${{ steps.version.outputs.version_no_v }}
        maintainer: "Tala Team"
        description: "Terminal AI Language Assistant"
        homepage: "https://github.com/domykasas/tala"
        license: "MIT"
        contents:
          - src: dist/tala-${{ matrix.name }}
            dst: /usr/bin/tala
            file_info:
              mode: 0755
          - src: dist/tala-gui-${{ matrix.name }}
            dst: /usr/bin/tala-gui
            file_info:
              mode: 0755
        EOF
        
        # Build DEB
        nfpm package --packager deb --target pkg/
        
        # Build RPM
        nfpm package --packager rpm --target pkg/
        
        # Create AppImage (basic)
        mkdir -p AppDir/usr/bin
        cp dist/tala-${{ matrix.name }} AppDir/usr/bin/tala
        cp dist/tala-gui-${{ matrix.name }} AppDir/usr/bin/tala-gui || echo "No GUI for AppImage"
        
        # Download AppImage tools
        wget -O appimagetool-x86_64.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppImage desktop file
        cat > AppDir/tala.desktop << 'EOF'
        [Desktop Entry]
        Name=Tala
        Exec=tala
        Icon=tala
        Type=Application
        Categories=Utility;
        EOF
        
        # Create AppImage
        ./appimagetool-x86_64.AppImage AppDir tala-${{ matrix.name }}.AppImage --no-appstream || echo "AppImage creation failed"

    - name: Create packages (Windows)
      if: matrix.packages && matrix.goos == 'windows'
      run: |
        # Create zip archive
        if [ -f "tala-gui-${{ matrix.name }}.exe" ]; then
          7z a tala-${{ matrix.name }}.zip tala-${{ matrix.name }}.exe tala-gui-${{ matrix.name }}.exe
        else
          7z a tala-${{ matrix.name }}.zip tala-${{ matrix.name }}.exe
        fi
      shell: bash

    - name: Create packages (macOS)
      if: matrix.packages && matrix.goos == 'darwin'
      run: |
        # Create DMG
        mkdir -p dist
        cp tala-${{ matrix.name }} dist/
        cp tala-gui-${{ matrix.name }} dist/ || echo "No GUI binary"
        
        # Create DMG using hdiutil
        hdiutil create -volname "Tala" -srcfolder dist -ov -format UDZO tala-${{ matrix.name }}.dmg

    - name: Create checksums
      shell: bash
      run: |
        # Create checksums for all artifacts
        echo "Creating checksums for ${{ matrix.name }} on ${{ matrix.goos }}..."
        ls -la
        
        # Determine the correct checksum command for the platform
        if [ "${{ matrix.goos }}" = "darwin" ]; then
          CHECKSUM_CMD="shasum -a 256"
        else
          CHECKSUM_CMD="sha256sum"
        fi
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows artifacts
          [ -f "tala-${{ matrix.name }}.exe" ] && $CHECKSUM_CMD tala-${{ matrix.name }}.exe > tala-${{ matrix.name }}.exe.sha256
          [ -f "tala-gui-${{ matrix.name }}.exe" ] && $CHECKSUM_CMD tala-gui-${{ matrix.name }}.exe > tala-gui-${{ matrix.name }}.exe.sha256
          [ -f "tala-${{ matrix.name }}.zip" ] && $CHECKSUM_CMD tala-${{ matrix.name }}.zip > tala-${{ matrix.name }}.zip.sha256
        else
          # Non-Windows artifacts
          [ -f "tala-${{ matrix.name }}" ] && $CHECKSUM_CMD tala-${{ matrix.name }} > tala-${{ matrix.name }}.sha256
          [ -f "tala-gui-${{ matrix.name }}" ] && $CHECKSUM_CMD tala-gui-${{ matrix.name }} > tala-gui-${{ matrix.name }}.sha256
          [ -f "tala-${{ matrix.name }}.dmg" ] && $CHECKSUM_CMD tala-${{ matrix.name }}.dmg > tala-${{ matrix.name }}.dmg.sha256
          [ -f "tala-${{ matrix.name }}.AppImage" ] && $CHECKSUM_CMD tala-${{ matrix.name }}.AppImage > tala-${{ matrix.name }}.AppImage.sha256
        fi
        
        # Create checksums for package files
        [ -f "pkg/tala_${{ steps.version.outputs.version_no_v }}_${{ matrix.goarch }}.deb" ] && $CHECKSUM_CMD pkg/tala_${{ steps.version.outputs.version_no_v }}_${{ matrix.goarch }}.deb > pkg/tala_${{ steps.version.outputs.version_no_v }}_${{ matrix.goarch }}.deb.sha256
        [ -f "pkg/tala-${{ steps.version.outputs.version_no_v }}-1.${{ matrix.goarch }}.rpm" ] && $CHECKSUM_CMD pkg/tala-${{ steps.version.outputs.version_no_v }}-1.${{ matrix.goarch }}.rpm > pkg/tala-${{ steps.version.outputs.version_no_v }}-1.${{ matrix.goarch }}.rpm.sha256
        
        echo "Checksums created:"
        ls -la *.sha256 pkg/*.sha256 2>/dev/null || echo "No checksum files found"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tala-${{ matrix.name }}
        path: |
          tala-*
          pkg/*
        retention-days: 30

  # Collect all artifacts and create release
  create-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -name "tala-*" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.deb" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.rpm" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.AppImage" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts -type f -name "*.sha256" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Get version
      id: version
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version_no_v=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Tala ${{ steps.version.outputs.version }} - Terminal AI Language Assistant"
        body: |
          # 🗣️ Tala ${{ steps.version.outputs.version }} - Terminal AI Language Assistant
          
          **A powerful terminal-based AI assistant with multiple interface modes and comprehensive file operation capabilities.**
          
          ## ✨ What's New in This Release
          
          This release includes bug fixes, performance improvements, and enhanced cross-platform compatibility for better user experience across all supported platforms.
          
          ## 🚀 Key Features
          
          - **Multiple AI Providers**: OpenAI, Anthropic Claude, and Ollama support
          - **AI-Integrated File Operations**: Natural language file and directory management
          - **Secure Shell Command Execution**: Run bash/shell commands safely with built-in filtering
          - **Dual Interface Modes**: Terminal (TUI) and Graphical (GUI) interfaces
          - **Copy-Paste Friendly**: No alt-screen mode for seamless terminal integration
          - **Real-Time Statistics**: Live response times, token counts, and session tracking
          - **Cross-Platform**: Linux, Windows, macOS, and FreeBSD support
          
          ## 📦 Download Options
          
          ### 🐧 Linux
          | Format | amd64 | arm64 |
          |--------|-------|-------|
          | **Binary (TUI)** | [tala-linux-amd64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-linux-amd64) | [tala-linux-arm64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-linux-arm64) |
          | **Binary (GUI)** | [tala-gui-linux-amd64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-linux-amd64) | [tala-gui-linux-arm64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-linux-arm64) |
          | **DEB Package** | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala_${{ steps.version.outputs.version_no_v }}_amd64.deb) | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala_${{ steps.version.outputs.version_no_v }}_arm64.deb) |
          | **RPM Package** | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-${{ steps.version.outputs.version_no_v }}-1.amd64.rpm) | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-${{ steps.version.outputs.version_no_v }}-1.arm64.rpm) |
          | **AppImage** | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-linux-amd64.AppImage) | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-linux-arm64.AppImage) |
          | **Snap Package** | Available via `snap install tala` or [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-${{ steps.version.outputs.version }}-linux-amd64.snap) | - |
          
          ### 🪟 Windows
          | Format | amd64 | arm64 |
          |--------|-------|-------|
          | **Executable (TUI)** | [tala-windows-amd64.exe](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-windows-amd64.exe) | [tala-windows-arm64.exe](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-windows-arm64.exe) |
          | **Executable (GUI)** | [tala-gui-windows-amd64.exe](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-windows-amd64.exe) | [tala-gui-windows-arm64.exe](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-windows-arm64.exe) |
          | **ZIP Archive** | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-windows-amd64.zip) | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-windows-arm64.zip) |
          
          ### 🍎 macOS
          | Format | Intel (amd64) | Apple Silicon (arm64) |
          |--------|---------------|----------------------|
          | **Binary (TUI)** | [tala-macos-amd64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-macos-amd64) | [tala-macos-arm64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-macos-arm64) |
          | **Binary (GUI)** | [tala-gui-macos-amd64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-macos-amd64) | [tala-gui-macos-arm64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-gui-macos-arm64) |
          | **DMG Installer** | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-macos-amd64.dmg) | [Download](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-macos-arm64.dmg) |
          
          ### 🔗 FreeBSD
          | Format | amd64 |
          |--------|-------|
          | **Binary (TUI)** | [tala-freebsd-amd64](https://github.com/domykasas/tala/releases/download/${{ steps.version.outputs.version }}/tala-freebsd-amd64) |
          
          ## 🔐 Security & Verification
          
          All binaries and packages include SHA256 checksums for verification. Download the corresponding `.sha256` file and verify using:
          
          ```bash
          # Linux/macOS/FreeBSD
          sha256sum -c filename.sha256
          
          # macOS (alternative)
          shasum -a 256 -c filename.sha256
          
          # Windows (PowerShell)
          Get-FileHash filename -Algorithm SHA256
          ```
          
          ## 🚀 Quick Start
          
          ### Prerequisites
          - Go 1.24.4+ (for building from source)
          - For default setup: Ollama with llama3.2:1b model
          - For OpenAI/Anthropic: Valid API keys
          
          ### Installation
          
          **Using Package Managers:**
          ```bash
          # Snap (Linux)
          sudo snap install tala
          
          # DEB (Ubuntu/Debian)
          sudo dpkg -i tala_*.deb
          
          # RPM (RHEL/Fedora/SUSE)
          sudo rpm -i tala-*.rpm
          ```
          
          **Direct Binary:**
          ```bash
          # Make executable and run
          chmod +x tala-*
          ./tala-*
          ```
          
          **From Source:**
          ```bash
          git clone https://github.com/domykasas/tala
          cd tala
          go mod tidy
          go build -o tala
          ./tala
          ```
          
          ## 📚 Documentation
          
          - **Configuration**: `~/.config/tala/config.json`
          - **Commands**: Use `/help` for available file commands
          - **AI Providers**: Supports OpenAI, Anthropic, and Ollama
          - **File Operations**: Natural language file management
          
          ## 🆘 Support
          
          - **Issues**: [GitHub Issues](https://github.com/domykasas/tala/issues)
          - **Documentation**: [README.md](https://github.com/domykasas/tala/blob/main/README.md)
          - **Changelog**: [CHANGELOG.md](https://github.com/domykasas/tala/blob/main/CHANGELOG.md)
          
          ---
          
          **Happy coding with Tala!** 🗣️
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-rc') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}