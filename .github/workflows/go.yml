name: Go

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.4'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Linux dependencies  
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc pkg-config

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --version || xcode-select --install || true

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Format code
      run: go fmt ./...

    - name: Build TUI
      env:
        CGO_ENABLED: 0
      run: go build -v ./...

    - name: Build GUI
      env:
        CGO_ENABLED: 0
      run: go build -tags gui -v ./... || echo "GUI build failed, continuing"

    - name: Test
      env:
        CGO_ENABLED: 0
      run: go test -v ./...

    - name: Test with race detector
      env:
        CGO_ENABLED: 1
      run: go test -race -v ./...

    - name: Vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Cross-compile test builds
      run: |
        echo "Testing cross-compilation..."
        
        # Test Linux builds
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o /tmp/tala-linux-amd64 .
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o /tmp/tala-linux-arm64 .
        
        # Test Windows builds
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o /tmp/tala-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 CGO_ENABLED=0 go build -o /tmp/tala-windows-arm64.exe .
        
        # Test macOS builds
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o /tmp/tala-macos-amd64 .
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o /tmp/tala-macos-arm64 .
        
        # Test FreeBSD builds
        GOOS=freebsd GOARCH=amd64 CGO_ENABLED=0 go build -o /tmp/tala-freebsd-amd64 .
        
        echo "Cross-compilation test completed successfully"

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30